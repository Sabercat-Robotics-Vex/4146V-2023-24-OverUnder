{"mode":"Blocks","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"U`9aA+=)r+L1tzA.)-qi\">end1</variable><variable id=\"VOI3-X;IDEKtBL~*{l6;\">end11</variable></variables><block type=\"v5_looks_print\" id=\"hCjF#K(_GRgQUDo,v[Xq\" x=\"450\" y=\"-6070\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\"2}ow(Q.=/Ogh57sgs;I!\"><field name=\"TEXT\">L Motor position: </field></shadow></value><next><block type=\"v5_looks_print\" id=\"sw5s-7P%pO,:%0jB$.D/\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_position_of_motor\" id=\"|__UneelC|cZFw~09)N+\"><field name=\"MOTOR\">Motor1</field><field name=\"UNITS\">deg</field></block></value><next><block type=\"v5_looks_print\" id=\"rONQwrwIP*5zEc[@qB[0\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">true</field><value name=\"DATA\"><shadow type=\"text\" id=\"[X`1zkfS^N2Ratr!jsr.\"><field name=\"TEXT\">     </field></shadow></value><next><block type=\"v5_looks_print\" id=\"*KvA=q:}Xj|lwP!%+OP)\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\"3Etl]A5XXlOwwOR9A1I8\"><field name=\"TEXT\">R Motor position: </field></shadow></value><next><block type=\"v5_looks_print\" id=\"#?W%8xCR/#YTw~vm9oLb\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_position_of_motor\" id=\"/g[jRUC1t+p;wd#=dxx.\"><field name=\"MOTOR\">Motor11</field><field name=\"UNITS\">deg</field></block></value><next><block type=\"v5_looks_print\" id=\")?c%Az:(UuUkn76JZ%Yh\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">true</field><value name=\"DATA\"><shadow type=\"text\" id=\"$KX8a]QdL8?/o7@#!ky+\"><field name=\"TEXT\">     </field></shadow></value></block></next></block></next></block></next></block></next></block></next></block><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"82\" y=\"131\"><next><block type=\"v5_motion_set_motor_velocity\" id=\"5Tn%v+KDgs2#-/Vj;n)P\"><field name=\"MOTOR\">Motor1</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"@YPby--vS+%q#,;AGLc7\"><field name=\"NUM\">20</field></shadow></value><next><block type=\"v5_motion_set_motor_velocity\" id=\"ruaIOHz*qSQ`O.=%[0{l\"><field name=\"MOTOR\">Motor11</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"o0f27O5|Y(V^Repc_D|J\"><field name=\"NUM\">20</field></shadow></value><next><block type=\"procedures_call\" id=\"xJ,9zu.:Od1[j|b;5ZM=\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" proccode=\"calibrateMotors\" proceduredefid=\"AGNN}9PkW#G`L0b;j$RT\" argumentids=\"[]\" warp=\"false\"></mutation><next><block type=\"v5_control_forever\" id=\"%$a%C?5BT3=/_tVvKx$x\"><statement name=\"SUBSTACK\"><block type=\"v5_looks_set_cursor\" id=\"B^_neAEw+WL_3QaGf1S^\"><field name=\"TARGET\">Brain</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\"2O~RRkcsIu~jQSO6spl-\"><field name=\"NUM\">1</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\"v@RV,c8=-(A3YPsJ9b7F\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_looks_print\" id=\"a{]A%4}zGdThoo)UZ8uw\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\"45j1yIdv|o8F5}?bS3?J\"><field name=\"TEXT\">L Motor position: </field></shadow></value><next><block type=\"v5_looks_print\" id=\"7gJ^REM1qIh21@$%GMmp\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\";s*dgI2N/Ollg0vlqZ|E\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_position_of_motor\" id=\"B;SW$oqv,T`fE=Ih=)AT\"><field name=\"MOTOR\">Motor1</field><field name=\"UNITS\">deg</field></block></value><next><block type=\"v5_looks_print\" id=\"wx=UkhKMWM{h0EN!8JFz\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">true</field><value name=\"DATA\"><shadow type=\"text\" id=\"$C.`LbA[s0o.W.P)Qs2;\"><field name=\"TEXT\">     </field></shadow></value><next><block type=\"v5_looks_print\" id=\"x=u{ZNu]GW5TN0/c,[:v\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\"BX|1ercKF+~B6|MQ@Y(j\"><field name=\"TEXT\">L reached end? </field></shadow></value><next><block type=\"v5_looks_print\" id=\".Jqzo-2M{$ugmik0^JX8\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\"1:}avj%r;GPV3QXL.@+T\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_operator_greater_than\" id=\"wAUhW6fl[iL?NN1]V=2j\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"/7-m,*#%G2[%#H7qtg`H\"><field name=\"NUM\">0</field></shadow><block type=\"v5_sensing_position_of_motor\" id=\"j.L38yx?gA?g0Gus-4_j\"><field name=\"MOTOR\">Motor1</field><field name=\"UNITS\">deg</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"#H}sj!TRGtu(jj8E@%wv\"><field name=\"NUM\">50</field></shadow><block type=\"v5_variables_variable\" id=\"L!BUf1Qb%*Y/$;ZH$;oX\"><field name=\"VARIABLE\" id=\"U`9aA+=)r+L1tzA.)-qi\">end1</field></block></value></block></value><next><block type=\"v5_looks_print\" id=\"dlHt)S+IegSowLmk[d|^\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">true</field><value name=\"DATA\"><shadow type=\"text\" id=\"D0}KPR.$gYSm?OJJQDyR\"><field name=\"TEXT\"> </field></shadow></value><next><block type=\"v5_looks_print\" id=\"CM*_gU3_-GkuqO?e!hl{\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\"k{u$=PdK:BD.#$_KivyD\"><field name=\"TEXT\">R Motor Position: </field></shadow></value><next><block type=\"v5_looks_print\" id=\"2YNu!Y+uN20/N%gHHyFA\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_position_of_motor\" id=\"Lki=H`9qAQd07@3H?I{`\"><field name=\"MOTOR\">Motor11</field><field name=\"UNITS\">deg</field></block></value><next><block type=\"v5_looks_print\" id=\"THnk|{Q/#faxxsXeKYW;\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">true</field><value name=\"DATA\"><shadow type=\"text\" id=\"o92[C/S*Zd04KTcT.1-M\"><field name=\"TEXT\">     </field></shadow></value><next><block type=\"v5_looks_print\" id=\"!V:z*,f%MG+DO?E8|5kF\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\"Z+ucv[VcJL-Kk!x2}rEv\"><field name=\"TEXT\">R reached end? </field></shadow></value><next><block type=\"v5_looks_print\" id=\"eL:zm#?dMXWWS.os?BgU\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\"Hsy!twjx[u82lhoG[*n}\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_operator_greater_than\" id=\"(Rp3.ehkyFRc8SMQ4u1C\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"D},kT@izhgpyB$rNs1:T\"><field name=\"NUM\">0</field></shadow><block type=\"v5_sensing_position_of_motor\" id=\"!tQ`RDxB_-uz`.,H^ExM\"><field name=\"MOTOR\">Motor11</field><field name=\"UNITS\">deg</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"Qps,%sls?Ms/A$2!y,v!\"><field name=\"NUM\">50</field></shadow><block type=\"v5_variables_variable\" id=\"/OH(HvHC_z[MA|7!5Gpy\"><field name=\"VARIABLE\" id=\"VOI3-X;IDEKtBL~*{l6;\">end11</field></block></value></block></value><next><block type=\"v5_looks_print\" id=\"`v]LFmiG+7:Xvy%J=r1D\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">true</field><value name=\"DATA\"><shadow type=\"text\" id=\"+eInAtjXyh+o;tO={NVV\"><field name=\"TEXT\"> </field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></next></block></next></block></next></block></next></block><block type=\"procedures_definition\" id=\"paJVJ}%7^*#{nb.rNR@%\" x=\"890\" y=\"150\"><statement name=\"custom_block\"><shadow type=\"procedures_prototype\" id=\"AGNN}9PkW#G`L0b;j$RT\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" proccode=\"calibrateMotors\" proceduredefid=\"AGNN}9PkW#G`L0b;j$RT\" argumentids=\"[]\" argumentnames=\"[]\" argumentdefaults=\"[]\" argumenttypes=\"[]\" warp=\"false\"></mutation></shadow></statement><next><block type=\"v5_control_if_then\" id=\"]8M{#CDC!T9Z=:K[Xva;\"><value name=\"CONDITION\"><block type=\"v5_operator_not\" id=\"5|dp6gzv|=@{{l}XDF$(\"><value name=\"OPERAND\"><block type=\"v5_sensing_pressing_limit\" id=\"+^vTh0-vd|ZXK[WSRB/A\"><field name=\"LIMIT\">LimitSwitchA</field></block></value></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_spin\" id=\"efJ}=FXR#9~p5}swIfWN\"><field name=\"MOTOR\">Motor1</field><field name=\"DIRECTION\">rev</field><next><block type=\"v5_control_wait_until\" id=\"Ah7;5qVL|hK7w~Tz?FV{\"><value name=\"CONDITION\"><block type=\"v5_sensing_pressing_limit\" id=\"k|loa_[n)ojcTG9HAe~q\"><field name=\"LIMIT\">LimitSwitchA</field></block></value><next><block type=\"v5_motion_stop_motor\" id=\"`M_aQXoxfsIZ--Hz!{^V\"><field name=\"MOTOR\">Motor1</field></block></next></block></next></block></statement><next><block type=\"v5_variables_set_variable\" id=\"?HH|V=?/LpT5guxIu3em\"><field name=\"VARIABLE\" id=\"U`9aA+=)r+L1tzA.)-qi\">end1</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"V%YKO^FPEm?]{10/es*+\"><field name=\"NUM\">0</field></shadow><block type=\"v5_operator_add\" id=\"xPE,l#7Dv~9l^naC8@(I\"><value name=\"NUM1\"><shadow type=\"math_number\" id=\"ReZm^.v9`A{`VUT+1jhM\"><field name=\"NUM\">0</field></shadow><block type=\"v5_sensing_position_of_motor\" id=\"GQb!3m/8p2lHzGKoR:?$\"><field name=\"MOTOR\">Motor1</field><field name=\"UNITS\">deg</field></block></value><value name=\"NUM2\"><shadow type=\"math_number\" id=\"BN/@=b,s{E{^!oi5nl8G\"><field name=\"NUM\">60</field></shadow></value></block></value><next><block type=\"v5_control_if_then\" id=\"t@JtJ+MUswdzM?=gG)#I\"><value name=\"CONDITION\"><block type=\"v5_operator_not\" id=\"xX~Rl${iYive)tEDFG^v\"><value name=\"OPERAND\"><block type=\"v5_sensing_pressing_limit\" id=\"ig,tuP]P%m/)aZr1D]w;\"><field name=\"LIMIT\">LimitSwitchH</field></block></value></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_spin\" id=\"}iqV[CD~g98%?cu@ytGB\"><field name=\"MOTOR\">Motor11</field><field name=\"DIRECTION\">rev</field><next><block type=\"v5_control_wait_until\" id=\"YL`5h0ON8FJzIEE@Kf8@\"><value name=\"CONDITION\"><block type=\"v5_sensing_pressing_limit\" id=\"tB5d}lc5(3tCJ*rB~n[i\"><field name=\"LIMIT\">LimitSwitchH</field></block></value><next><block type=\"v5_motion_stop_motor\" id=\"poYLK*gu^93UnK!Z87kJ\"><field name=\"MOTOR\">Motor11</field></block></next></block></next></block></statement><next><block type=\"v5_variables_set_variable\" id=\"D;020tMOT%ki=p@YQe6{\"><field name=\"VARIABLE\" id=\"VOI3-X;IDEKtBL~*{l6;\">end11</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"DD2Z(d.0VCue:e1((86`\"><field name=\"NUM\">0</field></shadow><block type=\"v5_operator_add\" id=\"hLQKlVM$Q!/p1$Z5r82.\"><value name=\"NUM1\"><shadow type=\"math_number\" id=\"[X3cC[4KVo=|O3dRJE3x\"><field name=\"NUM\">0</field></shadow><block type=\"v5_sensing_position_of_motor\" id=\"__M29|-L6nL3OwX,Z+/{\"><field name=\"MOTOR\">Motor11</field><field name=\"UNITS\">deg</field></block></value><value name=\"NUM2\"><shadow type=\"math_number\" id=\"oSm`fd8)mv%QvwE9%]u-\"><field name=\"NUM\">60</field></shadow></value></block></value></block></next></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"Motor1","leftDir":"false","right":"Motor11","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"LimitSwitchA","customName":false,"deviceType":"LimitSwitch","deviceClass":"limit","setting":{"id":"partner"},"triportSourcePort":22},{"port":[8],"name":"LimitSwitchH","customName":false,"deviceType":"LimitSwitch","deviceClass":"limit","setting":{"id":"partner"},"triportSourcePort":22},{"port":[11],"name":"Motor11","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[1],"name":"Motor1","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.3","minVersion":"3.0.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nlimit LimitSwitchA = limit(Brain.ThreeWirePort.A);\nlimit LimitSwitchH = limit(Brain.ThreeWirePort.H);\nmotor Motor11 = motor(PORT11, ratio36_1, true);\n\nmotor Motor1 = motor(PORT1, ratio36_1, false);\n\n\n\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // check the ButtonL1/ButtonL2 status to control Motor1\n      if (Controller1.ButtonL1.pressing()) {\n        Motor1.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        Motor1.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        Motor1.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control Motor11\n      if (Controller1.ButtonR1.pressing()) {\n        Motor11.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        Motor11.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        Motor11.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// User defined function\nvoid myblockfunction_calibrateMotors();\n\nint Brain_precision = 0, Console_precision = 0, Controller1_precision = 0;\n\nfloat end1, end11;\n\n// User defined function\nvoid myblockfunction_calibrateMotors() {\n  if (!LimitSwitchA.pressing()) {\n    Motor1.spin(reverse);\n    waitUntil(LimitSwitchA.pressing());\n    Motor1.stop();\n  }\n  end1 = Motor1.position(degrees) + 60.0;\n  if (!LimitSwitchH.pressing()) {\n    Motor11.spin(reverse);\n    waitUntil(LimitSwitchH.pressing());\n    Motor11.stop();\n  }\n  end11 = Motor11.position(degrees) + 60.0;\n}\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToBrain_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Brain_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  Motor1.setVelocity(20.0, percent);\n  Motor11.setVelocity(20.0, percent);\n  myblockfunction_calibrateMotors();\n  while (true) {\n    Brain.Screen.setCursor(1, 1);\n    Brain.Screen.print(\"L Motor position: \");\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(Motor1.position(degrees)));\n    Brain.Screen.print(\"     \");\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"L reached end\\? \");\n    Brain.Screen.print(\"%s\", Motor1.position(degrees) > end1 ? \"TRUE\" : \"FALSE\");\n    Brain.Screen.print(\" \");\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"R Motor Position: \");\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(Motor11.position(degrees)));\n    Brain.Screen.print(\"     \");\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"R reached end\\? \");\n    Brain.Screen.print(\"%s\", Motor11.position(degrees) > end11 ? \"TRUE\" : \"FALSE\");\n    Brain.Screen.print(\" \");\n    Brain.Screen.newLine();\n  wait(5, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}